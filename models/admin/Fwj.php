<?php
/**
 * 【用户登录数据校验】
 * Created by PhpStorm.
 * User: ZH
 * Date: 2018/11/13
 * Time: 21:16
 */

namespace app\models\admin;

use app\models\BaseModel;

class Fwj extends BaseModel
{
    public static $table   = 'district';
    public static $admin   = 'admin';
    public static $article = 'article';
    public static $link    = 'link';
    public static $message = 'message';
    public static $recruit = 'recruit';
    public static $product = 'images';
    public static $log     = 'log';
    public $verify, $name, $passwd;

    public function __construct()
    {
        parent::__construct();
    }

    /**
     * 规则校验
     * @return array
     */
    public function rules()
    {
        return [
            [['name', 'passwd', 'verify'], 'required'],
            //注意captchaAction的设置，指向你显示验证码的action，这里我们的是index/captcha
            ['verify', 'captcha', 'captchaAction' => '/admin/index/captcha', 'caseSensitive' => false, 'message' => '验证码输入错误'],
        ];
    }

    /**
     * 地址标签
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'name'   => '用户名',
            'passwd' => '密码',
            'verify' => '验证码',
        ];
    }

    /**
     * 表名
     * @return mixed|string
     */
    public static function tableName()
    {
        return self::$table; // TODO: Change the autogenerated stub
    }

    /**
     * 用户登录操作
     * @param $data
     * @return $this|bool|string
     */
    public function login($data)
    {
        parent::$logParam['module'] = '用户中心-用户登录';
        parent::$logParam['action'] = '登录';
        parent::$logParam['cmd'] = '用户列表';
        try {
            $path = str_replace("\\", "/", $this::className());
            //输入验证
            $this->load([basename($path) => $data]);
            if (!$this->validate()) {
                $error = (current($this->getFirstErrors()));
                throw new \Exception($error, parent::$isValidCode);
            }
            $session = \Yii::$app->session;
            $where = 'name=:name';
            $params['name'] = trim($data['name']);
            $info = $this->getS('admin', '*', 1, $where, $params);
            if (!$info) {
                throw new \Exception('用户名不存在！');
            }
            //用户禁用判断
            if ($info['status'] == '0') {
                throw new \Exception('该用户已被禁用，请联系管理员！');
            }
            //校验密码
            if ($info['pass'] != md5(trim($data['passwd']))) {
                throw new \Exception('密码不正确，请重新输入！');
            }
            $session->set('username', $info['name']);
            //更新登录时间
            parent::$handle->createCommand()->update('admin', ['time' => date('Y-m-d H:i:s', time()), 'last_time' => $info['time']], 'id=' . $info['id'])->execute();
            parent::saveOptLog(1);
            return true;
        } catch (\Exception $e) {
            return parent::catchException($e, $this);
        }
    }

    public function lists($pageSize)
    {
        $sql = "select * from " . self::$table . " order by id desc";
        return $this->getpagedata($sql, "", $pageSize, parent::$handle);
    }

    public function getdata()
    {
        $data = [];
        $res = $this->getS('data', 'mon', 0, 'name="张大海"',[],'order by id desc');
        $data['mon'] = array_column($res, 'mon');
        $pay1 = $this->getS('data','pay',0,'name="张大海"',[],'order by id desc');
        $pay2 = $this->getS('data','pay',0,'name="冯小婉"',[],'order by id desc');
        $a['name'] = '张大海';
        $a['p'] = array_column($pay1, 'pay');
        $b['name'] = '冯小婉';
        $b['p'] = array_column($pay2, 'pay');
        $data['appvalue'][0] = $a;
        $data['appvalue'][1] = $b;
        $data['unit'] = '元';
        $data['name'] = ['张大海','冯小婉'];
        return $data;
    }

    //查找密码
    public function findPwd($name)
    {
        $where = "name=:name";
        $params['name'] = $name;
        return $this->getS('admin', 'pass', 2, $where, $params);
    }

    //获取总数据
    public function basicGather()
    {
        $session = \Yii::$app->session;
        $name = $session['username'];
        $where = "status = 1";
        $where1 = "status = 'checked'";
        $data['art_num']     = $this->getS(self::$article, 'count(*)', 2, $where1);
        $data['link_num']    = $this->getS(self::$link, 'count(*)', 2, 'status="checked"');
        $data['message_num'] = $this->getS(self::$message, 'count(*)', 2);
        $data['user_num']    = $this->getS(self::$admin, 'count(*)', 2);
        $data['recruit_num'] = $this->getS(self::$recruit, 'count(*)', 2, $where);
        $data['product_num'] = $this->getS(self::$product, 'count(*)', 2, $where);
        $data['last_time']   = $this->getS(self::$admin, 'last_time', 2, "name='$name'");
        $data['last_time'] = isset($data['last_time']) ? $data['last_time'] : '-';
        return $data;
    }

    public function articleTop5()
    {
        $where = "status = 'checked'";
        $extra = "ORDER BY top DESC,id DESC LIMIT 4";
        return $this->getS(self::$article, 'title,time', 0, $where, [], $extra);
    }

    public function getSum()
    {
        $data['name'] = array_column($this->getS('total','*',0),'name');
        $data['data'] = $this->getS('total','value,name',0);
        return $data;
    }

    //系统日志列表
    public function getLog($page, $limit, $name)
    {
        $data = [];//用于返回的数据
        $data['code'] = 0;
        $data['msg'] = '';
        $data['count'] = $this->getS(self::$log, 'count(*)', 2);
        $extra = "order by id desc limit " . ($page - 1) * $limit . "," . $limit;
        //开启模糊查询
        $where = '';
        $param = [];
        if (!empty($name)) {
            $where .= " ip like :name AND";
            $param['name'] = '%' . trim($name) . '%';
        }
        $where .= ' 1=1';
        $field = "`id`,`user`, CASE 
            WHEN type =1 THEN '注册会员'
            WHEN type =2 THEN '中级会员'
            WHEN type =3 THEN '高级会员'
            WHEN type =4 THEN '钻石会员'
            WHEN type =5 THEN '超级会员'
            END `type`,`ip`,`module`,`action`,cmd,`time`,CASE 
            WHEN result =0 THEN '失败'
            WHEN result =1 THEN '成功'
            END `result`";
        $data['data'] = $this->getS(self::$log, $field, 0, $where, $param, $extra);
        return $data;
    }

    //用户退出
    public function loginout()
    {
        parent::$logParam['module'] = '用户中心-用户退出';
        parent::$logParam['action'] = '退出';
        parent::$logParam['cmd'] = '用户列表';
        $session = \Yii::$app->session;
        parent::saveOptLog(1);
        $session->remove('username');
        return true;
    }

    //锁屏状态
    public function getLockStatus($user)
    {
        $where = "name =:name";
        $param['name'] = $user;
        $status = $this->getS(self::$admin, '`lock`', 2, $where, $param);
        return $status == 1 ? false : true;
    }

    //锁屏
    public function setLock($user)
    {
        parent::$logParam['module'] = '后台管理中心';
        parent::$logParam['action'] = '设置锁屏';
        parent::$logParam['cmd'] = '首页';
        $where = 'name=:name';
        $params['name'] = $user;
        $data['id'] = $this->getS(self::$admin, 'id', 2, $where, $params);
        $data['lock'] = 0;
        $this->addOrEdit(self::$admin, $data, 'id');
        parent::saveOptLog(1);
        return true;
    }

    //解锁
    public function clearLock($post)
    {
        parent::$logParam['module'] = '后台管理中心';
        try {
            parent::$logParam['action'] = '锁屏解锁';
            parent::$logParam['cmd'] = '首页';
            $session = \Yii::$app->session;
            $where = 'name=:name';
            $params['name'] = $session['username'];
            $info = $this->getS(self::$admin, 'id,pass', 1, $where, $params);
            if (md5(trim($post['pass'])) != $info['pass']) {
                throw new \Exception('锁屏密码错误，请重新输入！');
            }
            $data['id'] = $info['id'];
            $data['lock'] = 1;
            $this->addOrEdit(self::$admin, $data, 'id');
            parent::saveOptLog(1);
            return true;
        } catch (\Exception $e) {
            return parent::catchException($e, $this);
        }
    }

}