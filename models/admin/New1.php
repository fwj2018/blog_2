<?php
/**
 * 【用户留言】
 * Created by PhpStorm.
 * User: admin
 * Date: 2019/1/15
 * Time: 14:16
 */

namespace app\models\admin;

use app\models\BaseModel;

class New1 extends BaseModel
{
    public static $table = '2019_zf';
    public $name, $content;

    public function __construct()
    {
        parent::__construct();
    }

    /**
     * 规则校验
     * @return array
     */
    public function rules()
    {
        return [
			[['name', 'content'], 'required'],
			 ['name', 'match', 'pattern' => '/^[\x{4e00}-\x{9fa5}0-9a-zA-Z_]+$/u', 'message' => '{attribute}不能输入特殊符号'],
            [['name', 'content'], 'valiDate1'],
        ];
    }

    /**
     * 地址标签
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'name'     => '您的姓名',
            'content'  => '您的祝福',
        ];
    }

    /**
     * 表名
     * @return mixed|string
     */
    public static function tableName()
    {
        return self::$table; // TODO: Change the autogenerated stub
    }

    //校验数据
    public function valiDate1($attribute)
    {
        switch ($attribute) {
            case 'name': 
                if (strlen($this->name) > 15 ) {
                    return $this->addError($attribute, '您的姓名不能超过15个字符！');
                }
                break;
            case 'content':
                 if (strlen($this->content) > 40) {
                    return $this->addError($attribute, '您的祝福不能超过40个字符！');
                }
                break;
        }

    }

    /**
     * 修改密码
     * @param $data
     * @return $this|bool|string
     */
    public function saveData($data)
    {
        try {
			//输入验证
			$path = str_replace("\\", "/", $this::className());
			$this->load([basename($path) => $data]);
			if (!$this->validate()) {
				$error = (current($this->getFirstErrors()));
				throw new \Exception($error, parent::$isValidCode);
			}
            $params['name'] = trim($data['name']);
            $params['content'] = trim($data['content']);
            $params['time'] = date('Y-m-d H:i:s');
            $params['ip'] = \Yii::$app->request->getUserIP();
            $this->addOrEdit(self::$table, $params, 'id', 'add');
			sendMail('251630332@qq.com', '来自【'.trim($data['name']).'】的祝福', '<b>祝福语：</b>'.$data['content'], trim($data['name']));
            return true;
        } catch (\Exception $e) {
            return parent::catchException($e, $this);
        }
    }

    public function listall($page, $limit, $name)
    {
        $data = [];//用于返回的数据
        $data['code'] = 0;
        $data['msg'] = '';
        $data['count'] = $this->getS(self::$table, 'count(*)', 2);
        $extra = "order by id desc limit " . ($page - 1) * $limit . "," . $limit;
        //开启模糊查询
        $where = '';
        $param = [];
        if (!empty($name)) {
            $where .= " name like :name AND";
            $param['name'] = '%' . trim($name) . '%';
        }
        $where .= ' 1=1';
        $data['data'] = $this->getS(self::$table, '*', 0, $where, $param, $extra);
        return $data;
    }

}