<?php
/**
 * 【友情链接业务逻辑层】
 * Created by PhpStorm.
 * User: ZH
 * Date: 2018/11/24 0024
 * Time: 15:50
 */

namespace app\models\admin;

use app\models\BaseModel;

class Mail extends BaseModel
{
    public static $link = 'link';
    public $to, $subject, $sign ,$content;

    public function __construct()
    {
        parent::__construct();
    }

    /**
     * 规则校验
     * @return array
     */
    public function rules()
    {
        return [
            [['to', 'subject', 'sign' , 'content'], 'required'],
            [['to'], 'checkMail'],
        ];
    }

    /**
     * 地址标签
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'to'           => '收件人邮箱',
            'subject'      => '邮件主题',
            'sign'         => '签名',
            'content'      => '邮件内容',
        ];
    }

    /**
     * 表名
     * @return mixed|string
     */
    public static function tableName()
    {
        return self::$link; // TODO: Change the autogenerated stub
    }

    //校验数据
    public function checkMail($attribute)
    {
        $mail = explode(',', $this->$attribute);
        //校验邮箱格式
        foreach ($mail as $value) {
            if ($this->checkByPreg($value, '40', "$value", $res) !== true) {
                $this->addError($attribute, $res);
            }
        }
        //校验重复
        if (count(array_unique($mail)) != count($mail)) {
            $this->addError($attribute, '收件人邮箱重复！');
        }
    }
    /**
     * URL新增和编辑
     * @param $data
     * @return bool|string|void
     */
    public function sendMail($data)
    {
		parent::$logParam['module'] = '前台首页';
        parent::$logParam['action'] = '发送';
        parent::$logParam['cmd'] = '邮件操作';
        try {
            $path = str_replace("\\", "/", $this::className());
            //输入验证
            $this->load([basename($path) => $data]);
            if (!$this->validate()) {
                $error = (current($this->getFirstErrors()));
                throw new \Exception($error, parent::$isValidCode);
            }
            $mail = explode(',', $data['to']);
            foreach ($mail as $to) {
                $res = sendMail($to, trim($data['subject']), $data['content'], trim($data['sign']));
                if ($res !== true) {
                    return false;
                }
            }
			parent::saveOptLog(1);
            return true;
        } catch (\Exception $e) {
            return parent::catchException($e, $this);
        }
    }

    /**
     * URL列表
     * @param $page '当前页'
     * @param $limit '每页显示条数'
     * @param $name '查询条件 标题'
     * @return array
     * @throws \yii\db\Exception
     */
    public function lists($page, $limit, $name)
    {
        $data = [];//用于返回的数据
        $data['code'] = 0;
        $data['msg'] = '';
        $data['count'] = $this->getS(self::$link, 'count(*)', 2);
        $extra = "order by id desc limit " . ($page - 1) * $limit . "," . $limit;
        //开启模糊查询
        $where = '';
        $param = [];
        if (!empty($name)) {
            $where .= " url like :name AND";
            $param['name'] = '%' . trim($name) . '%';
        }
        $where .= ' 1=1';
        $data['data'] = $this->getS(self::$link, '*', 0, $where, $param, $extra);
        return $data;
    }

    /**
     * 批量删除操作
     * @param $ids 'id,多个id用,隔开'
     * @return bool
     * @throws \yii\db\Exception
     */
    public function linkDel($ids)
    {
        $this->picDelete($ids);
        $sql = "DELETE FROM " . self::$link . " WHERE (id IN ($ids))";
        $ex = parent::$handle->createCommand($sql);
        $ex->execute();
        return true;
    }

    /**
     * 删除操作删除图片
     */
    public function picDelete($ids)
    {
        $sql = "SELECT id,pic FROM " . self::$link . " WHERE (id IN ($ids))";
        $ex = parent::$handle->createCommand($sql);
        $data = $ex->queryAll();
        $pic = array_column($data, 'pic');
        foreach ($pic as $v) {//删除友链图片
            unlink('..' . $v);
        }
    }

}