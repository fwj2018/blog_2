<?php
/**
 * 【轮播图管理-增删改业务逻辑模型】
 * Created by PhpStorm.
 * User: ZH
 * Date: 2018/12/15
 * Time: 14:30
 */

namespace app\models\admin;

use app\models\BaseModel;

class Banner extends BaseModel
{
    public static $table = 'banner';
    public $name, $description, $thum, $content, $classify;

    public function __construct()
    {
        parent::__construct();
        parent::$logParam['module'] = '内容管理-轮播图';
    }

    /**
     * 规则校验
     * @return array
     */
    public function rules()
    {
        return [
            [['name', 'content', 'classify'], 'required'],
        ];
    }

    /**
     * 地址标签
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'name'    => '图片名称',
            'thum'    => '缩略图',
            'content' => '内容',
            'classify'=> '图片类别',
        ];
    }

    /**
     * 表名
     * @return mixed|string
     */
    public static function tableName()
    {
        return self::$table; // TODO: Change the autogenerated stub
    }

    /**
     * 轮播图新增和编辑
     * @param $data
     * @return bool|string|void
     */
    public function banAddOrEdit($data)
    {
        $action = !empty($data['id']) && isset($data['id']) ? 'edit' : 'add';
        parent::$logParam['action'] = $action == 'edit' ? EDIT : ADD;
        parent::$logParam['cmd'] = '轮播图管理';
        try {
            $path = str_replace("\\", "/", $this::className());
            //输入验证
            $this->load([basename($path) => $data]);
            if (!$this->validate()) {
                $error = (current($this->getFirstErrors()));
                throw new \Exception($error, parent::$isValidCode);
            }
            if (!isset($data['thum'])) {
                throw new \Exception('请上传Banner图！');
            }
            //如果是编辑判断图片和内容中的图片是否被修改
            if ($action == 'edit') {
                $where = 'id=' . $data['id'];
                $info = $this->getS(self::$table, 'thum,content', 1, $where);
                if ($data['thum'] != $info['thum']) {//删除原图片
                    unlink('..' . $info['thum']);
                }
                preg_match_all('/<img.*?src="(\/.*?)".*?>/is', $info['content'], $c1);
                preg_match_all('/<img.*?src="(\/.*?)".*?>/is', $data['content'], $c2);
                $tmp1 = [];
                $tmp2 = [];
                //获取原来内容图片集合
                foreach ($c1[1] as $k1 => $v1) {
                    $tmp1[$k1] = $v1;
                }
                ////获取修改内容图片集合
                foreach ($c2[1] as $k2 => $v2) {
                    $tmp2[$k2] = $v2;
                }
                //获取前后图片差集
                $diff = array_diff($tmp1, $tmp2);
                if (!empty($diff)) {
                    foreach ($diff as $d) {
                        unlink('..' . $d);
                    }
                }
            }
            $data['time'] = date('Y-m-d H:i:s', time());
            $this->addOrEdit(self::$table, $data, 'id', $action);
            parent::saveOptLog(1);
            return true;
        } catch (\Exception $e) {
            return parent::catchException($e, $this);
        }
    }

    /**
     * 轮播图列表
     * @param $page '当前页'
     * @param $limit '每页显示条数'
     * @param $name '查询条件 标题'
     * @return array
     * @throws \yii\db\Exception
     */
    public function lists($page, $limit, $name)
    {
        $data = [];//用于返回的数据
        $data['code'] = 0;
        $data['msg'] = '';
        $data['count'] = $this->getS(self::$table, 'count(*)', 2);
        $extra = "order by classify, id desc limit " . ($page - 1) * $limit . "," . $limit;
        //开启模糊查询
        $where = '';
        $param = [];
        if (!empty($name)) {
            $where .= " name like :name AND";
            $param['name'] = '%' . trim($name) . '%';
        }
        $where .= ' 1=1';
        $data['data'] = $this->getS(self::$table, '*', 0, $where, $param, $extra);
        return $data;
    }

    /**
     * 批量删除操作
     * @param $ids 'id,多个id用,隔开'
     * @return bool
     * @throws \yii\db\Exception
     */
    public function banDels($ids)
    {
        parent::$logParam['action'] = DELETE . ' 【' . $ids . ' 】轮播图';
        parent::$logParam['cmd'] = '轮播图管理';
        $this->picDelete($ids);
        $sql = "DELETE FROM " . self::$table . " WHERE (id IN ($ids))";
        $ex = parent::$handle->createCommand($sql);
        $ex->execute();
        parent::saveOptLog(1);
        return true;
    }

    /**
     * 删除操作删除图片
     */
    public function picDelete($ids)
    {
        $sql = "SELECT id,thum,content FROM " . self::$table . " WHERE (id IN ($ids))";
        $ex = parent::$handle->createCommand($sql);
        $data = $ex->queryAll();
        $pic = array_column($data, 'thum');
        $c_pic = array_column($data, 'content');
        foreach ($pic as $v) {//删除缩略图
            unlink('..' . $v);
        }
        foreach ($c_pic as $c) {
            preg_match_all('/<img.*?src="(\/.*?)".*?>/is', $c, $arr);
            foreach ($arr[1] as $p) {
                unlink('..' . $p);
            }
        }
    }

    //置顶操作
    public function setTop($id)
    {
        $where = 'id=:id';
        $param['id'] = $id;
        $res = $this->getS(self::$table, 'id,top', 1, $where, $param);
        if ($res['top'] == 'checked') {
            return false;
        }
        //组装数据
        $data['id'] = $id;
        $data['top'] = 'checked';
        $this->addOrEdit(self::$table, $data, 'id');
        return true;
    }

}