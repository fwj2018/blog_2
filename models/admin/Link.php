<?php
/**
 * 【友情链接业务逻辑层】
 * Created by PhpStorm.
 * User: ZH
 * Date: 2018/11/24 0024
 * Time: 15:50
 */

namespace app\models\admin;

use app\models\BaseModel;

class Link extends BaseModel
{
    public static $link = 'link';
    public $url_name, $mail, $url;

    public function __construct()
    {
        parent::__construct();
        parent::$logParam['module'] = '碎片管理-友情链接';
    }

    /**
     * 规则校验
     * @return array
     */
    public function rules()
    {
        return [
            [['url_name', 'url', 'mail'], 'required'],
            [['url', 'mail'], 'checkUrl'],
        ];
    }

    /**
     * 地址标签
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'url_name' => '网站名称',
            'url'      => '网站地址',
            'mail'     => '站长邮箱',
        ];
    }

    /**
     * 表名
     * @return mixed|string
     */
    public static function tableName()
    {
        return self::$link; // TODO: Change the autogenerated stub
    }

    //校验数据
    public function checkUrl($attribute)
    {
        switch ($attribute) {
            case 'url':
                if ($this->checkByPreg($this->url, '43', '网站地址', $res) !== true) {
                    $this->addError($attribute, $res);
                }
                break;
            case 'mail':
                if ($this->checkByPreg($this->mail, '40', '站长邮箱', $res) !== true) {
                    $this->addError($attribute, $res);
                }
                break;
        }
    }

    /**
     * URL新增和编辑
     * @param $data
     * @return bool|string|void
     */
    public function linkAddOrEdit($data)
    {
        $action = !empty($data['id']) && isset($data['id']) ? 'edit' : 'add';
        parent::$logParam['action'] = $action == 'edit' ? EDIT : ADD;
        parent::$logParam['cmd'] = '友情链接';
        try {
            $path = str_replace("\\", "/", $this::className());
            //输入验证
            $this->load([basename($path) => $data]);
            if (!$this->validate()) {
                $error = (current($this->getFirstErrors()));
                throw new \Exception($error, parent::$isValidCode);
            }
            //如果是编辑判断图片和内容中的图片是否被修改
            $data['pic'] = !isset($data['pic']) ? '' : $data['pic'];
            if ($action == 'add') {//新建url唯一
                $where = 'url=:name';
                $params['name'] = trim($data['url']);
                $info = $this->getS(self::$link, 'count(*)', 2, $where, $params);
                if ($info > 0) {
                    throw new \Exception('网站地址已存在。');
                }
                unset($data['id']);
            }
            $this->addOrEdit(self::$link, $data, 'id', $action);
            parent::saveOptLog(1);
            return true;
        } catch (\Exception $e) {
            return parent::catchException($e, $this);
        }
    }

    /**
     * URL列表
     * @param $page '当前页'
     * @param $limit '每页显示条数'
     * @param $name '查询条件 标题'
     * @return array
     * @throws \yii\db\Exception
     */
    public function lists($page, $limit, $name)
    {
        $data = [];//用于返回的数据
        $data['code'] = 0;
        $data['msg'] = '';
        $data['count'] = $this->getS(self::$link, 'count(*)', 2);
        $extra = "order by id desc limit " . ($page - 1) * $limit . "," . $limit;
        //开启模糊查询
        $where = '';
        $param = [];
        if (!empty($name)) {
            $where .= " url like :name AND";
            $param['name'] = '%' . trim($name) . '%';
        }
        $where .= ' 1=1';
        $data['data'] = $this->getS(self::$link, '*', 0, $where, $param, $extra);
        return $data;
    }

    /**
     * 批量删除操作
     * @param $ids 'id,多个id用,隔开'
     * @return bool
     * @throws \yii\db\Exception
     */
    public function linkDel($ids)
    {
        parent::$logParam['action'] = DELETE;
        parent::$logParam['cmd'] = '友情链接';
        $this->picDelete($ids);
        $sql = "DELETE FROM " . self::$link . " WHERE (id IN ($ids))";
        $ex = parent::$handle->createCommand($sql);
        $ex->execute();
        parent::saveOptLog(1);
        return true;
    }

    /**
     * 删除操作删除图片
     */
    public function picDelete($ids)
    {
        $sql = "SELECT id,pic FROM " . self::$link . " WHERE (id IN ($ids))";
        $ex = parent::$handle->createCommand($sql);
        $data = $ex->queryAll();
        $pic = array_column($data, 'pic');
        foreach ($pic as $v) {//删除友链图片
            unlink('..' . $v);
        }
    }

    //置顶操作
    public function setStatus($post)
    {
        $status = $post['status'] == 'checked' ? $post['status'] : '';
        parent::$logParam['action'] = $status == 'checked' ? '取消隐藏' : '隐藏';
        parent::$logParam['cmd'] = '友链状态设置';
        //组装数据
        $data['id'] = $post['id'];
        $data['status'] = $status;
        $this->addOrEdit(self::$link, $data, 'id');
        parent::saveOptLog(1);
        return true;
    }


}