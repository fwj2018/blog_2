<?php
/**
 * 【用户修改密码】
 * Created by PhpStorm.
 * User: admin
 * Date: 2018/11/13
 * Time: 21:16
 */

namespace app\models\admin;

use app\models\BaseModel;

class User extends BaseModel
{
    public static $table = 'admin';
    public $name, $email, $brief, $pass;

    public function __construct()
    {
        parent::__construct();
        parent::$logParam['module'] = '用户中心';
    }

    /**
     * 规则校验
     * @return array
     */
    public function rules()
    {
        return [
            [['name', 'pass', 'email'], 'required'],
            [['name', 'pass', 'email', 'brief'], 'testData'],
        ];
    }

    /**
     * 地址标签
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'name'  => '用户名',
            'pass'  => '密码',
            'email' => '邮箱',
        ];
    }

    /**
     * 表名
     * @return mixed|string
     */
    public static function tableName()
    {
        return self::$table; // TODO: Change the autogenerated stub
    }

    //校验数据
    public function testData($attribute)
    {
        switch ($attribute) {
            case 'email':
                if ($this->checkByPreg($this->email, '40', '用户', $res) !== true) {
                    return $this->addError('email', $res);
                }
                break;
            case 'pass':
                if ($this->checkByPreg($this->pass, '42', '用户', $res) !== true) {
                    return $this->addError('pass', $res);
                }
                break;
            case 'brief':
                if ($this->brief != '') {
                    if (strlen($this->brief) > 200) {
                        return $this->addError('brief', '用户简介不能超过200个字符！');
                    }
                }
                break;
            case 'name':
                if ($this->checkByPreg($this->name, '1', '用户名', $res) !== true) {
                    return $this->addError('name', $res);
                }
                break;
        }
    }

    //新增和修改用户信息
    public function userEdit($data)
    {
        $action = !empty($data['id']) && isset($data['id']) ? 'edit' : 'add';
        parent::$logParam['action'] = $action == 'edit' ? EDIT : ADD;
        parent::$logParam['cmd'] = '用户中心-用户列表';
        try {
            //获取类名
            $path = str_replace("\\", "/", $this::className());
            //输入验证
            $this->load([basename($path) => $data]);
            if (!$this->validate()) {
                $error = (current($this->getFirstErrors()));
                throw new \Exception($error, parent::$isValidCode);
            }
            if ($action == 'add') {
                $where = 'name=:name';
                $params['name'] = trim($data['name']);
                $info = $this->getS(self::$table, 'count(*)', 2, $where, $params);
                if ($info > 0) {
                    throw new \Exception('用户名已存在。');
                }
                $data['pass'] = md5(trim($data['pass']));
            }
            $this->addOrEdit(self::$table, $data, 'id', $action);
            parent::saveOptLog(1);
            return true;
        } catch (\Exception $e) {
            return parent::catchException($e, $this);
        }
    }

    /**
     * 用户列表
     * @param $page '当前页'
     * @param $limit '每页显示条数'
     * @param $name '查询条件 标题'
     * @return array
     * @throws \yii\db\Exception
     */
    public function lists($page, $limit, $name)
    {
        $data = [];//用于返回的数据
        $data['code'] = 0;
        $data['msg'] = '';
        $data['count'] = $this->getS(self::$table, 'count(*)', 2);
        $extra = "order by id desc limit " . ($page - 1) * $limit . "," . $limit;
        //开启模糊查询
        $where = '';
        $param = [];
        if (!empty($name)) {
            $where .= " name like :name AND";
            $param['name'] = '%' . trim($name) . '%';
        }
        $where .= ' 1=1';
        $data['data'] = $this->getS(self::$table, '*', 0, $where, $param, $extra);
        return $data;
    }

    public function userDel($ids)
    {
        parent::$logParam['action'] = DELETE;
        parent::$logParam['cmd'] = '用户中心';
        $sql = "DELETE FROM " . self::$table . " WHERE (id IN ($ids))";
        $ex = parent::$handle->createCommand($sql);
        $ex->execute();
        parent::saveOptLog(1);
        return true;
    }

    //置顶操作
    public function setStatus($post)
    {
        $status = $post['status'] == 'checked' ? $post['status'] : '';
        parent::$logParam['action'] = $status == 'checked' ? '取消禁用' : '禁用';
        parent::$logParam['cmd'] = '用户状态设置';
        //组装数据
        $data['id'] = $post['id'];
        $data['status'] = $status;
        $this->addOrEdit(self::$table, $data, 'id');
        parent::saveOptLog(1);
        return true;
    }


}